{"version":3,"sources":["config/config.js","auth/Field.jsx","auth/Auth.jsx","game/Goals.jsx","game/Game.jsx","App.js","serviceWorker.js","index.js"],"names":["config","Field","props","react_default","a","createElement","className","title","value","onChange","type","apiUrl","Config","Auth","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","isSignIn","login","firstName","secondName","password","axios","method","url","concat","withCredentials","data","onLogin","user","id","v4","lastName","_this2","_this$state2","onClick","setState","style","fontWeight","auth_Field","event","target","send","bind","React","Component","Goals","Fragment","goals","filter","item","side","length","Game","redAttack","redDef","blackAttack","blackDef","fetchData","role","console","log","players","status","setPlayers","slots","red","attack","def","black","forEach","player","_this$state","game_Goals","disabled","join","App","then","_ref","e","game_Game","auth_Auth","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.39abe750.chunk.js","sourcesContent":["export default {\n    api_url: \"http://kicker.www109.lan/api\"\n}\n","import React from 'react';\n\nconst Field = props => {\n    return (\n        <div className='field_root'>\n            <div className='field_title'>{props.title}</div>\n            <input\n                className='field_input'\n                value={props.value}\n                onChange={props.onChange}\n                type={props.type ? props.type : 'text'}\n            />\n        </div>\n    );\n}\n\nexport default Field;\n","import React, { useState } from 'react';\nimport axios from 'axios';\nimport { v4 } from 'uuid';\nimport Field from './Field';\nimport Config from '../config/config';\n\nconst apiUrl = Config.api_url;\n\nclass Auth extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isSignIn: true,\n            login: '',\n            firstName: '',\n            secondName: '',\n            password: ''\n        };\n    }\n\n    async send() {\n        const { isSignIn, login, firstName, secondName, password } = this.state;\n\n        if (!isSignIn) {\n            const { data } = await axios({\n                method: 'post',\n                url: `${apiUrl}/auth/${login}`,\n                withCredentials: true,\n                data: {\n                    password: password\n                }\n            });\n\n            this.props.onLogin(data.user);\n        } else {\n            const { data } = await axios({\n                method: 'post',\n                url: `${apiUrl}/user`,\n                withCredentials: true,\n                data: {\n                    id: v4(),\n                    login: login,\n                    password: password,\n                    firstName: firstName,\n                    lastName: secondName\n                }\n            });\n\n            this.props.onLogin(data.user);\n        }\n    }\n\n    render() {\n        const { isSignIn, login, firstName, secondName, password } = this.state;\n\n        return (<div className='auth_root'>\n            <div className='auth_togglerWrapper'>\n                <div\n                    onClick={() => {this.setState({isSignIn: true})}}\n                    style={isSignIn ? {fontWeight: 'bold'} : null}\n                    className='auth_toggler'\n                >\n                    Sign in\n                </div>\n                <div\n                    onClick={() => {this.setState({isSignIn: false})}}\n                    style={!isSignIn ? {fontWeight: 'bold'} : null}\n                    className='auth_toggler'\n                >\n                    Sign up\n                </div>\n            </div>\n            { !isSignIn ? (\n                    <div className='auth_reg'>\n                        <Field\n                            title='login'\n                            value={login}\n                            onChange={(event) => {this.setState({login: event.target.value})}}\n                        />\n                        <Field\n                            title='first name'\n                            value={firstName}\n                            onChange={(event) => {this.setState({firstName: event.target.value})}}\n                        />\n                        <Field\n                            title='second name'\n                            value={secondName}\n                            onChange={(event) => {this.setState({secondName: event.target.value})}}\n                        />\n                        <Field\n                            title='password'\n                            value={password}\n                            type={'password'}\n                            onChange={(event) => {this.setState({password: event.target.value})}}\n                        />\n                    </div>\n                )\n                : (\n                    <div className='auth_reg'>\n                        <Field\n                            title='login'\n                            value={login}\n                            onChange={(event) => {this.setState({login: event.target.value})}}\n                        />\n                        <Field\n                            title='password'\n                            value={password}\n                            type={'password'}\n                            onChange={(event) => {this.setState({password: event.target.value})}}\n                        />\n                    </div>\n                )\n            }\n            <button onClick={this.send.bind(this)}>\n                send\n            </button>\n        </div>);\n    }\n}\n\nconst Auth2 = props => {\n    const [state, setState] = useState({\n        authPage: 'reg',\n        login: '',\n        firstName: '',\n        lastName: '',\n        pass: ''\n    });\n\n    const onLoginChange = (event) => {\n        const target = event.nativeEvent ? event.nativeEvent.target : event.target;\n\n        setField('login', target.value);\n    }\n\n    const onFirstNameChange = (event) => {\n        const target = event.nativeEvent ? event.nativeEvent.target : event.target;\n\n        setField('firstName', target.value);\n    }\n\n    const onSecondNameChange = (event) => {\n        const target = event.nativeEvent ? event.nativeEvent.target : event.target;\n\n        setField('secondName', target.value);\n    }\n\n    const onPassChange = (event) => {\n        const target = event.nativeEvent ? event.nativeEvent.target : event.target;\n\n        setField('pass', target.value);\n    }\n\n    const setField = (fieldName, fieldValue) => {\n        setState((prevState) => ({\n            ...prevState,\n            [fieldName]: fieldValue,\n        }));\n    }\n\n    const send = async() => {\n\n        let apiUrl = Config.api_url;\n        let res;\n\n        if (state.authPage === 'reg') {\n            res = await axios.post(apiUrl + '/user', {\n                id: v4(),\n                login: state.login,\n                password: state.pass,\n                firstName: state.firstName,\n                lastName: state.lastName\n            });\n        } else {\n            res = await axios.post(`${apiUrl}/auth/${state.login}`, {\n                password: state.pass\n            });\n        }\n\n        // props.authentificate(res.data.user);\n    }\n\n    return (\n        <div className='auth_root'>\n            <div className='auth_togglerWrapper'>\n                <div\n                    onClick={() => setField('authPage', 'auth')}\n                    style={state.authPage === 'auth' ? {fontWeight: 'bold'} : {} }\n                    className='auth_toggler'\n                >\n                    auth\n                </div>\n                <div\n                    onClick={() => setField('authPage', 'reg')}\n                    style={state.authPage === 'reg' ? {fontWeight: 'bold'} : {} }\n                    className='auth_toggler'\n                >\n                    reg\n                </div>\n            </div>\n            {state.authPage === 'reg'\n                ? (\n                    <div className='auth_reg'>\n                        <Field\n                            title='login'\n                            value={state.login}\n                            onChange={(event) => {this.setState({login: event.target.value})}}\n                        />\n                        <Field\n                            title='first name'\n                            value={state.firstName}\n                            onChange={(event) => {this.setState({login: event.target.value})}}\n                        />\n                        <Field\n                            title='second name'\n                            value={state.secondName}\n                            onChange={(event) => {this.setState({login: event.target.value})}}\n                        />\n                        <Field\n                            title='password'\n                            value={state.password}\n                            onChange={(event) => {this.setState({login: event.target.value})}}\n                        />\n                    </div>\n                )\n                : (\n                    <div className='auth_reg'>\n                        <Field\n                            title='login'\n                            value={state.login}\n                            onChange={onLoginChange}\n                        />\n                        <Field\n                            title='password'\n                            value={state.pass}\n                            onChange={onPassChange}\n                        />\n                    </div>\n                )\n            }\n\n            <button onClick={() => send()}>\n                send\n            </button>\n        </div>\n    );\n}\n\nexport default Auth;\n","import React from 'react';\n\nconst Goals = props => {\n    return (\n        <>\n            <div>{props.goals.filter(item => item.side === 'defence').length}</div>\n            -\n            <div>{props.goals.filter(item => item.side === 'attack').length}</div>\n        </>\n    );\n};\n\nexport default Goals;","import React from 'react';\nimport axios from 'axios';\n\nimport Player from './Player';\nimport Goals from './Goals';\n\nimport Config from '../config/config';\n\nclass Game extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            redAttack: null,\n            redDef: null,\n            blackAttack: null,\n            blackDef: null\n        }\n    }\n\n\n    componentDidMount() {\n        this.fetchData();\n    }\n\n\n    async join(role, side) {\n        const { data } = await axios({\n            method: 'post',\n            url: `${Config.api_url}/game`,\n            withCredentials: true,\n            data: {\n                role: role,\n                side: side\n            }\n        });\n\n        console.log(data);\n    }\n\n    async fetchData() {\n        const { data } = await axios({\n            method: 'get',\n            url: `${Config.api_url}/game`,\n            withCredentials: true,\n        });\n\n        const { players, goals, status } = data;\n\n        this.setPlayers(players);\n    }\n\n    setGoals(goals) {\n        this.setState({\n            goals\n        });\n    }\n\n    setPlayers(players) {\n        const slots = {\n            red: {\n                attack: null,\n                def: null\n            },\n            black: {\n                attack: null,\n                def: null\n            }\n        };\n\n        players.forEach((player) => {\n            if (player.side === 'BLACK') {\n                if (player.role === 'attack') {\n                    slots.black.attack = player;\n                } else {\n                    slots.black.def = player;\n                }\n            } else {\n                if (player.role === 'attack') {\n                    slots.red.attack = player;\n                } else {\n                    slots.red.def = player;\n                }\n            }\n        });\n\n        this.setState({\n            redAttack: slots.red.attack,\n            redDef: slots.red.def,\n            blackAttack: slots.black.attack,\n            blackDef: slots.black.def\n        });\n    }\n\n    render() {\n        const { redAttack, redDef, blackAttack, blackDef, goals } = this.state;\n\n        return (\n            <div className='game_root'>\n                <div className='game_title'>kicker.lan</div>\n\n                <Goals goals={goals} />\n\n                {/* <div>{props.status}</div> */}\n\n                <button\n                    disabled={!!redAttack}\n                    onClick={() => { this.join('attack', 'RED') }}\n                >\n                    Join (red attack)\n            </button>\n                <button\n                    disabled={!!redDef}\n                    onClick={() => { this.join('defense', 'RED') }}\n                >\n                    Join (red def)\n            </button>\n                <button\n                    disabled={!!blackAttack}\n                    onClick={() => { this.join('attack', 'BLACK') }}\n                >\n                    Join (black attack)\n            </button>\n                <button\n                    disabled={!!blackDef}\n                    onClick={() => { this.join('defense', 'BLACK') }}\n                >\n                    Join (black def)\n            </button>\n            </div>\n        );\n    }\n};\n\nexport default Game;\n","import React, { Component } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport Config from './config/config';\n\nimport Auth from './auth/Auth';\nimport Game from './game/Game';\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            user: null\n        }\n    }\n\n    componentDidMount() {\n        try {\n            axios({\n                method: 'get',\n                url: Config.api_url + '/auth',\n                withCredentials: true,\n            }).then(({data}) => {\n                this.setState({\n                    user: data.user\n                });\n            });\n        } catch (e) {\n            console.log('err');\n        }\n    }\n\n    onLogin(user) {\n        this.setState({\n            user: user\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                {this.state.user ?\n                    <Game\n                        user={this.state.user}\n                    /> : <Auth onLogin={this.onLogin.bind(this)}/>\n                }\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}